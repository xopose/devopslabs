name: Spring CI

on:
  push:
    branches: [ master, lab2, lab3, lab4 ]
  pull_request:
    branches: [ master, lab2, lab3, lab4 ]

jobs:
  build-backend:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build backend
        run: |
          cd backend
          mvn clean package -B -DskipTests

  test-backend:
    needs: build-backend
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Tests
        run: |
          cd backend
          mvn clean verify

  build-frontend:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Dependencies
        run: |
          cd frontend
          npm ci

      - name: Tests
        run: |
          cd frontend
          npx vitest run

  sonar-scan:
    needs: [ build-backend, build-frontend ]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java for backend scan
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Node.js for frontend scan
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      - name: Build Java project
        run: |
          cd backend
          mvn clean verify

      - name: Install SonarScanner CLI
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "${PWD}/sonar-scanner/bin" >> $GITHUB_PATH

      - name: Debug access to SonarQube
        run: curl -v ${{ secrets.SONAR_HOST_URL }}/api/system/status

      - name: Run SonarQube Analysis (full project)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=xopose_devopslabs_07bbd886-620a-47f7-b790-5481cf90ae59 \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info \
            -Dsonar.tests=backend/src/test,frontend/__tests__ \
            -Dsonar.sources=backend/src/main,frontend/src/components \
            -Dsonar.exclusions=frontend/node_modules/** \
            -Dsonar.java.binaries=backend/target/classes

  docker-deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build images
        run: |
          docker compose -f docker-compose.yml build
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-backend:latest
          docker tag frontend ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Set up KUBECONFIG
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 --decode > ~/.kube/config

      - name: Delete last
        run: |
          kubectl delete deployment --all

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/

      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get svc
          kubectl get hpa

